// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vibes         Vibe[]
  comments      Comment[]
  likes         Like[]
  projects      Project[]
  chatMessages  ChatMessage[]

  @@map("users")
}

model Vibe {
  id          String   @id @default(cuid())
  title       String
  description String?
  mood        Mood
  color       String?  // Hex color for the vibe
  tags        String[] // Array of tags
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments Comment[]
  likes    Like[]

  @@map("vibes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  vibeId String
  vibe   Vibe @relation(fields: [vibeId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  vibeId String
  vibe   Vibe @relation(fields: [vibeId], references: [id], onDelete: Cascade)

  // Ensure a user can only like a vibe once
  @@unique([userId, vibeId])
  @@map("likes")
}

enum Mood {
  HAPPY
  SAD
  EXCITED
  CALM
  ENERGETIC
  ROMANTIC
  NOSTALGIC
  MYSTERIOUS
  UPBEAT
  CHILL
}

// --- Lovable-like additions ---

model Project {
  id                String        @id @default(cuid())
  name              String
  description       String?
  repoUrl           String        // GitHub repository URL
  supabaseProjectId String?       // Supabase project ID
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  ownerId           String
  owner             User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  chatMessages      ChatMessage[]

  @@map("projects")
}

model ChatMessage {
  id        String   @id @default(cuid())
  role      String   // "user" | "assistant"
  content   String
  createdAt DateTime @default(now())

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("chat_messages")
}
