/*
  deterministic-skeleton.ts
  ---------------------------------------------
  Centralised utilities for deterministic project generation when AI services
  are unavailable. This mirrors Lovable’s guarantee that the user always
  receives a compilable Next.js project skeleton.
*/

import { ProjectStatus } from '@/generated/prisma'

// Local copies of lightweight interfaces (kept here to avoid circular deps)
export interface AIAnalysisMinimal {
  projectName: string
  description: string
  framework: string
  styling: string
  database?: string | null
}

export interface ProjectFileLite {
  filename: string
  path: string
  content: string
  language: string
  projectId: string
}

// Detect language from file-path extension
export function getLanguageFromPath(filePath: string): string {
  const ext = filePath.split('.').pop();
  switch (ext) {
    case 'tsx':
    case 'ts':
      return 'typescript';
    case 'jsx':
    case 'js':
      return 'javascript';
    case 'css':
      return 'css';
    case 'json':
      return 'json';
    case 'md':
      return 'markdown';
    case 'html':
      return 'html';
    default:
      return 'text';
  }
}

// Generate placeholder content for key files
export function createFallbackFileContent(
  filePath: string,
  analysis: AIAnalysisMinimal
): string {
  const fileName = filePath.split('/').pop() || 'file';

  switch (fileName) {
    case 'page.tsx':
      return `import React from 'react';

export default function Page() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-pink-600 flex items-center justify-center">
      <div className="text-center text-white">
        <h1 className="text-4xl font-bold mb-4">${analysis.projectName}</h1>
        <p className="text-xl opacity-90">${analysis.description}</p>
        <div className="mt-8">
          <p className="text-sm opacity-75">
            This is a placeholder page. Your AI-generated content will appear here once the API is available.
          </p>
        </div>
      </div>
    </div>
  );
}`;

    case 'layout.tsx':
      return `import type { Metadata } from 'next';
import './globals.css';

export const metadata: Metadata = {
  title: '${analysis.projectName}',
  description: '${analysis.description}',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`;

    case 'globals.css':
      return `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
}`;

    case 'package.json':
      return JSON.stringify(
        {
          name: analysis.projectName.toLowerCase().replace(/[^a-z0-9]/g, '-'),
          version: '0.1.0',
          private: true,
          scripts: {
            dev: 'next dev',
            build: 'next build',
            start: 'next start',
            lint: 'next lint',
          },
          dependencies: {
            next: '^14.0.0',
            react: '^18.0.0',
            'react-dom': '^18.0.0',
          },
          devDependencies: {
            '@types/node': '^20.0.0',
            '@types/react': '^18.0.0',
            '@types/react-dom': '^18.0.0',
            typescript: '^5.0.0',
            tailwindcss: '^3.3.0',
            autoprefixer: '^10.4.0',
            postcss: '^8.4.0',
          },
        },
        null,
        2
      );

    case 'README.md':
      return `# ${analysis.projectName}

${analysis.description}

## Getting Started

This project was generated using the deterministic fallback. To get started:

1. Install dependencies:
   \`\`\`bash
   npm install
   \`\`\`

2. Run the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open http://localhost:3000 in your browser.`;

    default:
      return `// ${fileName}
// Placeholder generated by deterministic fallback.

export default function ${fileName.replace(/[^a-zA-Z0-9]/g, '')}() {
  return (
    <div>
      <h1>${fileName}</h1>
      <p>Placeholder content for ${fileName}</p>
    </div>
  );
}`;
  }
}

// Main helper: builds deterministic skeleton and returns shape expected by UI
export async function generateDeterministicProjectSkeleton(ctx: any, userPrompt: string) {
  const safeName = userPrompt.slice(0, 50).replace(/[^a-zA-Z0-9\s]/g, '').trim() || 'My App';

  // 1. Create minimal project
  const project = await ctx.db.project.create({
    data: {
      name: safeName,
      description: userPrompt,
      framework: 'Next.js',
      styling: 'Tailwind CSS',
      initialPrompt: userPrompt,
      template: 'web-app',
      userId: ctx.user.id,
      status: ProjectStatus.BUILDING,
    },
    include: {
      _count: {
        select: { files: true, chatSessions: true },
      },
    },
  });

  const analysis: AIAnalysisMinimal = {
    projectName: project.name,
    description: project.description || '',
    framework: 'Next.js',
    styling: 'Tailwind CSS',
    database: null,
  };

  const essentialFiles = [
    'src/app/page.tsx',
    'src/app/layout.tsx',
    'src/app/globals.css',
    'package.json',
    'README.md',
    'tsconfig.json',
    'next.config.js',
    'tailwind.config.js',
  ];

  const files: ProjectFileLite[] = essentialFiles.map((filePath) => ({
    filename: filePath.split('/').pop() || 'file',
    path: filePath,
    content: createFallbackFileContent(filePath, analysis),
    language: getLanguageFromPath(filePath),
    projectId: project.id,
  }));

  if (files.length) {
    await ctx.db.projectFile.createMany({ data: files });
  }

  const readyProject = await ctx.db.project.update({
    where: { id: project.id },
    data: { status: ProjectStatus.READY },
    include: {
      _count: { select: { files: true, chatSessions: true } },
    },
  });

  return {
    ...readyProject,
    aiProcessed: false,
    filesGenerated: files.length,
    totalFiles: files.length,
    sandboxCreated: false,
    sandboxUrl: null,
    error: 'AI processing failed – deterministic skeleton generated',
  };
}